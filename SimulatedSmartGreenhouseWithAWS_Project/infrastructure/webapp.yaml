AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete CI/CD pipeline for Smart Green House webapp deployment'

Parameters:
  ApplicationName:
    Type: String
    Default: 'smartgreenhouse'
    Description: 'Name of the application'
  
  Environment:
    Type: String
    Default: 'production'
    AllowedValues:
      - development
      - staging
      - production
    Description: 'Environment name'
  
  GitHubRepo:
    Type: String
    Default: 'Smart-Green-houses/SmartGreenHouse'
    Description: 'GitHub repository in format owner/repo'
  
  GitHubBranch:
    Type: String
    Default: 'master'
    Description: 'GitHub branch to build from'
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: 'GitHub personal access token for CodePipeline'
  
  InstanceType:
    Type: String
    Default: 't3.micro'
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t2.micro
      - t2.small
    Description: 'EC2 instance type'
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'EC2 Key Pair for SSH access'
  
  SSHLocation:
    Type: String
    Default: '0.0.0.0/0'
    Description: 'IP address range for SSH access'

Resources:
  # S3 Bucket for CodePipeline artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ApplicationName}-${Environment}-artifacts-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # IAM Role for CodePipeline
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-${Environment}-CodePipelineRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketVersioning
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactsBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactsBucket}'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'

  # IAM Role for CodeBuild
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-${Environment}-CodeBuildRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactsBucket}/*'

  # IAM Role for CodeDeploy
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-${Environment}-CodeDeployRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  # IAM Role for EC2 instances
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ApplicationName}-${Environment}-EC2Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactsBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactsBucket}'

  # Instance Profile for EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # Security Group for Web Server
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for web server'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: 'SSH access'
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: 'Node.js app port'

  # EC2 Instance for Web Server
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0fdbea22f3180a1ca  # Amazon Linux 2 AMI (update for your region)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt WebServerSecurityGroup.GroupId
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y ruby wget

          # Install CodeDeploy agent
          cd /home/ec2-user
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start

          # Install Node.js 16.x (compatible with Amazon Linux 2)
          curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -
          yum install -y nodejs

          # Verify Node.js and npm installation
          node --version
          npm --version

          # Install PM2 for process management
          npm install -g pm2

          # Install serve for serving built React apps
          npm install -g serve

          # Create application directory
          mkdir -p /var/www/html
          chown ec2-user:ec2-user /var/www/html

          # Start CodeDeploy agent on boot
          chkconfig codedeploy-agent on

          # Log installation status
          echo "Node.js version: $(node --version)" >> /var/log/user-data.log
          echo "npm version: $(npm --version)" >> /var/log/user-data.log
          echo "PM2 version: $(pm2 --version)" >> /var/log/user-data.log
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName}-${Environment}-WebServer'
        - Key: Environment
          Value: !Ref Environment

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${ApplicationName}-${Environment}-Build'
      Description: 'Build project for Smart Green House webapp'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: false
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - echo Build started on `date`
                - cd AWS-Project/webapp
            build:
              commands:
                - echo Build phase started on `date`
                - npm install
                - npm run build || echo "No build script found, skipping build step"
                - echo "Preparing deployment files..."
                - mkdir -p deploy
                - cp -r dist deploy/
                - cp appspec.yml deploy/
                - cp -r scripts deploy/
            post_build:
              commands:
                - echo Build completed on `date`
                - ls -la deploy/
          artifacts:
            files:
              - '**/*'
            base-directory: 'AWS-Project/webapp/deploy'
            name: BuildArtifact

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${ApplicationName}-${Environment}'
      ComputePlatform: Server

  # CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${ApplicationName}-${Environment}-DeploymentGroup'
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key: Name
          Value: !Sub '${ApplicationName}-${Environment}-WebServer'

  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ApplicationName}-${Environment}-Pipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Select [0, !Split ['/', !Ref GitHubRepo]]
                Repo: !Select [1, !Split ['/', !Ref GitHubRepo]]
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput

Outputs:
  PipelineName:
    Description: 'Name of the CodePipeline'
    Value: !Ref CodePipeline
    
  S3BucketName:
    Description: 'Name of the S3 bucket for artifacts'
    Value: !Ref ArtifactsBucket
    
  WebServerInstanceId:
    Description: 'Instance ID of the web server'
    Value: !Ref WebServerInstance
    
  WebServerPublicIP:
    Description: 'Public IP address of the web server'
    Value: !GetAtt WebServerInstance.PublicIp
    
  WebServerPublicDNS:
    Description: 'Public DNS name of the web server'
    Value: !GetAtt WebServerInstance.PublicDnsName
    
  SecurityGroupId:
    Description: 'Security Group ID for the web servers'
    Value: !Ref WebServerSecurityGroup
